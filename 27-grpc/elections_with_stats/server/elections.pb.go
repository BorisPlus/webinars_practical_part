// Code generated by protoc-gen-go. DO NOT EDIT.
// source: elections.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Vote struct {
	Passport             string               `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	CandidateId          uint32               `protobuf:"varint,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Note                 string               `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2d3077d176f007, []int{0}
}

func (m *Vote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vote.Unmarshal(m, b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return xxx_messageInfo_Vote.Size(m)
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetPassport() string {
	if m != nil {
		return m.Passport
	}
	return ""
}

func (m *Vote) GetCandidateId() uint32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *Vote) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Vote) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type Stats struct {
	Records              map[uint32]uint32    `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2d3077d176f007, []int{1}
}

func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetRecords() map[uint32]uint32 {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *Stats) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*Vote)(nil), "Vote")
	proto.RegisterType((*Stats)(nil), "Stats")
	proto.RegisterMapType((map[uint32]uint32)(nil), "Stats.RecordsEntry")
}

func init() {
	proto.RegisterFile("elections.proto", fileDescriptor_1a2d3077d176f007)
}

var fileDescriptor_1a2d3077d176f007 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x59, 0x28, 0xbc, 0x30, 0x40, 0x5e, 0xb3, 0x1a, 0xd3, 0xd4, 0x83, 0xb5, 0xa7, 0x5e,
	0x58, 0x0c, 0x5e, 0x0c, 0x47, 0x13, 0x62, 0xbc, 0x16, 0xe3, 0xc1, 0x8b, 0x59, 0xe8, 0x48, 0x56,
	0x69, 0xb7, 0xe9, 0x0e, 0x26, 0x7c, 0x04, 0xbf, 0x86, 0x9f, 0xd4, 0x74, 0x97, 0x36, 0x46, 0x63,
	0xe2, 0x69, 0xe7, 0xcf, 0x6f, 0x77, 0x9e, 0x67, 0x16, 0xfe, 0xe3, 0x16, 0xd7, 0xa4, 0x74, 0x6e,
	0x44, 0x51, 0x6a, 0xd2, 0xc1, 0xf9, 0x46, 0xeb, 0xcd, 0x16, 0xa7, 0x36, 0x5b, 0xed, 0x9e, 0xa7,
	0xa4, 0x32, 0x34, 0x24, 0xb3, 0xe2, 0x00, 0x9c, 0x7d, 0x07, 0x30, 0x2b, 0x68, 0xef, 0x9a, 0xd1,
	0x3b, 0x03, 0xef, 0x41, 0x13, 0xf2, 0x00, 0xfa, 0x85, 0x34, 0xa6, 0xd0, 0x25, 0xf9, 0x2c, 0x64,
	0xf1, 0x20, 0x69, 0x72, 0x7e, 0x01, 0xa3, 0xb5, 0xcc, 0x53, 0x95, 0x4a, 0xc2, 0x27, 0x95, 0xfa,
	0xed, 0x90, 0xc5, 0xe3, 0x64, 0xd8, 0xd4, 0xee, 0x52, 0xce, 0xc1, 0xcb, 0x35, 0xa1, 0xdf, 0xb1,
	0x57, 0x6d, 0xcc, 0x05, 0x78, 0x95, 0x16, 0xdf, 0x0b, 0x59, 0x3c, 0x9c, 0x05, 0xc2, 0xe9, 0x10,
	0xb5, 0x0e, 0x71, 0x5f, 0x0b, 0x4d, 0x2c, 0x17, 0x7d, 0x30, 0xe8, 0x2e, 0x49, 0x92, 0xe1, 0x13,
	0xf8, 0x57, 0xe2, 0x5a, 0x97, 0xa9, 0xf1, 0x59, 0xd8, 0x89, 0x87, 0xb3, 0x63, 0x61, 0x1b, 0x22,
	0x71, 0xd5, 0x45, 0x4e, 0xe5, 0x3e, 0xa9, 0x99, 0x66, 0x50, 0xfb, 0x6f, 0x83, 0x82, 0x39, 0x8c,
	0xbe, 0x3e, 0xc4, 0x8f, 0xa0, 0xf3, 0x8a, 0x7b, 0x6b, 0x7b, 0x9c, 0x54, 0x21, 0x3f, 0x81, 0xee,
	0x9b, 0xdc, 0xee, 0xf0, 0x60, 0xd5, 0x25, 0xf3, 0xf6, 0x35, 0x9b, 0xbd, 0xc0, 0x60, 0x51, 0xff,
	0x00, 0x9f, 0x00, 0x2c, 0x77, 0xab, 0x4c, 0x91, 0x5d, 0x61, 0x57, 0x54, 0x47, 0x70, 0xfa, 0x63,
	0xfe, 0xa2, 0x5a, 0x78, 0xd4, 0xe2, 0x02, 0xfa, 0xb7, 0x48, 0xce, 0xe2, 0x2f, 0x54, 0xd0, 0x73,
	0x4e, 0xa3, 0xd6, 0x25, 0xbb, 0xe9, 0x3d, 0x7a, 0x99, 0x54, 0xf9, 0xaa, 0x67, 0x99, 0xab, 0xcf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x56, 0xf4, 0x7d, 0xfc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ElectionsClient is the client API for Elections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ElectionsClient interface {
	SubmitVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Elections_GetStatsClient, error)
}

type electionsClient struct {
	cc grpc.ClientConnInterface
}

func NewElectionsClient(cc grpc.ClientConnInterface) ElectionsClient {
	return &electionsClient{cc}
}

func (c *electionsClient) SubmitVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Elections/SubmitVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionsClient) GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Elections_GetStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Elections_serviceDesc.Streams[0], "/Elections/GetStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &electionsGetStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Elections_GetStatsClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type electionsGetStatsClient struct {
	grpc.ClientStream
}

func (x *electionsGetStatsClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ElectionsServer is the server API for Elections service.
type ElectionsServer interface {
	SubmitVote(context.Context, *Vote) (*empty.Empty, error)
	GetStats(*empty.Empty, Elections_GetStatsServer) error
}

// UnimplementedElectionsServer can be embedded to have forward compatible implementations.
type UnimplementedElectionsServer struct {
}

func (*UnimplementedElectionsServer) SubmitVote(ctx context.Context, req *Vote) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVote not implemented")
}
func (*UnimplementedElectionsServer) GetStats(req *empty.Empty, srv Elections_GetStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}

func RegisterElectionsServer(s *grpc.Server, srv ElectionsServer) {
	s.RegisterService(&_Elections_serviceDesc, srv)
}

func _Elections_SubmitVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionsServer).SubmitVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Elections/SubmitVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionsServer).SubmitVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elections_GetStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectionsServer).GetStats(m, &electionsGetStatsServer{stream})
}

type Elections_GetStatsServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type electionsGetStatsServer struct {
	grpc.ServerStream
}

func (x *electionsGetStatsServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

var _Elections_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Elections",
	HandlerType: (*ElectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitVote",
			Handler:    _Elections_SubmitVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStats",
			Handler:       _Elections_GetStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elections.proto",
}
